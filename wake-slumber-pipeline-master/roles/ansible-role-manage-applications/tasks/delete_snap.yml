---

- debug:
    msg: "{{ block_device }}"

- name: Get list of snapshots by instance id, block devices and purpose
  ec2_snapshot_info:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    region: "{{ region }}"
    filters:
      "tag:Name": "*{{ block_device }}*"
      "tag:instance-id": "*{{ instance_id }}*"
      "tag:purpose": "slumber"
  register: instance_snap_info

- set_fact:
    ec2_snapshots: "{{ instance_snap_info.snapshots | sort_dict('start_time') }}"

- debug:
    msg: "{{ ec2_snapshots[2:] | json_query( '[*].snapshot_id' ) }}"
# with_dict: "{{ result.instances[0].block_device_mapping }}"

- name: Delete redundant snapshots
  local_action:
    module: ec2_snapshot
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    region: "{{ region }}"
    snapshot_id: "{{ item }}"
    state: absent
  with_items: "{{ ec2_snapshots[2:] | json_query( '[*].snapshot_id' ) }}"
  when: ec2_snapshots | length > 2

- name: Ensure tags are present on a resource
  ec2_tag:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    region: "{{ region }}"
    resource: "{{ ec2_snapshots[1].snapshot_id }}"
    state: present
    tags:
      Name: "{{ ec2_snapshots[1].tags.Name[:-1] }}2"
      device-name: "{{ ec2_snapshots[1].tags | filter_dict('device-name') }}"
      instance-id: "{{ ec2_snapshots[1].tags | filter_dict('instance-id') }}"
      server: "{{ ec2_snapshots[1].tags | filter_dict('server') }}"
      size: "{{ ec2_snapshots[1].tags | filter_dict('size') }}"
      volume-id: "{{ ec2_snapshots[1].tags | filter_dict('volume-id') }}"
      purpose: "slumber"
  when: ec2_snapshots | length > 1